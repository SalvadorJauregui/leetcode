https://leetcode.com/problems/hamming-distance/description/

The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 ≤ x, y < 231.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑

The above arrows point to positions where the corresponding bits are different.


/* Solution 1 */
class Solution {
    
    public int hammingDistance(int x, int y) {
        int countDiffBits = 0;
        int base = Math.max(x,y);
        
        while(base>0){
            /* Compare the rightmost bits */
            if ((x&1 ^ y&1) == 1)
                ++countDiffBits;
            /* Move one bit to the right */
            y>>=1;
            x>>=1;
            base>>=1;
        }
        return countDiffBits;
    }
}


/* Solution 2 */
public class Solution {
    public int hammingDistance(int x, int y) {
        return Integer.bitCount(x ^ y);
    }
}

/* Solution 3 */
class Solution {    
    
    public int hammingDistance(int x, int y) {
        int countDiffBits = 0;
        int distance = x ^ y;
        
        while(distance>0){
            /* Compare the rightmost bits */
            if ((distance & 1) == 1)
                ++countDiffBits;
            /* Move one bit to the right */            
            distance>>=1;
        }
        return countDiffBits;
    }
}

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:
s = "leetcode"
return 0.

s = "loveleetcode",
return 2.

Run time: 9 ms, Memory:	39.3 MB
class Solution {
    public int firstUniqChar(String s) {
            
        int[] map = new int[26];
        
        for (int i = 0; i < s.length(); i++){
            char c = s.charAt(i);                            
            map[c-'a']++;
        }
        for (int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if (map[c -'a'] == 1)
                return i;
        }
        return -1;
    }    
}

Run time: 38 ms, Memory:	39.2 MB
class Solution {
    public int firstUniqChar(String s) {
		Map<Character, Integer> map = new HashMap<>();
		
		/* add to map */
		for (char c : s.toCharArray()) {
			map.put(c, map.getOrDefault(c, 0) + 1 );
		}		
		
		/* Found the unique char */
		for (int i = 0 ; i < s.length(); i++) {
			if (map.get(s.charAt(i)) == 1)
				return i;
		}		
		return -1;	
    }
}


Run time: 44 ms, Memory:	39.5 MB
class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> count = new HashMap<Character, Integer>();
        int n = s.length();
        
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            count.put(c, count.getOrDefault(c, 0) + 1);
        }
                
        for (int i = 0; i < n; i++) {
            if (count.get(s.charAt(i)) == 1) 
                return i;
        }
        return -1;
    }
}
